
LAB2_real.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039f4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003b8c  08003b8c  00013b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bac  08003bac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bac  08003bac  00013bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bb4  08003bb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb4  08003bb4  00013bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bb8  08003bb8  00013bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08003bc8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003bc8  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9f5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2c  00000000  00000000  0002aa31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0002c460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007c0  00000000  00000000  0002ccb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f04  00000000  00000000  0002d478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a838  00000000  00000000  0004337c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008daa2  00000000  00000000  0004dbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db656  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002284  00000000  00000000  000db6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003b74 	.word	0x08003b74

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003b74 	.word	0x08003b74

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b974 	b.w	8000cb4 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468e      	mov	lr, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14d      	bne.n	8000a8e <__udivmoddi4+0xaa>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4694      	mov	ip, r2
 80009f6:	d969      	bls.n	8000acc <__udivmoddi4+0xe8>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b152      	cbz	r2, 8000a14 <__udivmoddi4+0x30>
 80009fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000a02:	f1c2 0120 	rsb	r1, r2, #32
 8000a06:	fa20 f101 	lsr.w	r1, r0, r1
 8000a0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a12:	4094      	lsls	r4, r2
 8000a14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a18:	0c21      	lsrs	r1, r4, #16
 8000a1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a1e:	fa1f f78c 	uxth.w	r7, ip
 8000a22:	fb08 e316 	mls	r3, r8, r6, lr
 8000a26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a2a:	fb06 f107 	mul.w	r1, r6, r7
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	d90a      	bls.n	8000a48 <__udivmoddi4+0x64>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a3a:	f080 811f 	bcs.w	8000c7c <__udivmoddi4+0x298>
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	f240 811c 	bls.w	8000c7c <__udivmoddi4+0x298>
 8000a44:	3e02      	subs	r6, #2
 8000a46:	4463      	add	r3, ip
 8000a48:	1a5b      	subs	r3, r3, r1
 8000a4a:	b2a4      	uxth	r4, r4
 8000a4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a50:	fb08 3310 	mls	r3, r8, r0, r3
 8000a54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a58:	fb00 f707 	mul.w	r7, r0, r7
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	d90a      	bls.n	8000a76 <__udivmoddi4+0x92>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a68:	f080 810a 	bcs.w	8000c80 <__udivmoddi4+0x29c>
 8000a6c:	42a7      	cmp	r7, r4
 8000a6e:	f240 8107 	bls.w	8000c80 <__udivmoddi4+0x29c>
 8000a72:	4464      	add	r4, ip
 8000a74:	3802      	subs	r0, #2
 8000a76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7a:	1be4      	subs	r4, r4, r7
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	b11d      	cbz	r5, 8000a88 <__udivmoddi4+0xa4>
 8000a80:	40d4      	lsrs	r4, r2
 8000a82:	2300      	movs	r3, #0
 8000a84:	e9c5 4300 	strd	r4, r3, [r5]
 8000a88:	4631      	mov	r1, r6
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d909      	bls.n	8000aa6 <__udivmoddi4+0xc2>
 8000a92:	2d00      	cmp	r5, #0
 8000a94:	f000 80ef 	beq.w	8000c76 <__udivmoddi4+0x292>
 8000a98:	2600      	movs	r6, #0
 8000a9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	fab3 f683 	clz	r6, r3
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d14a      	bne.n	8000b44 <__udivmoddi4+0x160>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xd4>
 8000ab2:	4282      	cmp	r2, r0
 8000ab4:	f200 80f9 	bhi.w	8000caa <__udivmoddi4+0x2c6>
 8000ab8:	1a84      	subs	r4, r0, r2
 8000aba:	eb61 0303 	sbc.w	r3, r1, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	469e      	mov	lr, r3
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e0      	beq.n	8000a88 <__udivmoddi4+0xa4>
 8000ac6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aca:	e7dd      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000acc:	b902      	cbnz	r2, 8000ad0 <__udivmoddi4+0xec>
 8000ace:	deff      	udf	#255	; 0xff
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	f040 8092 	bne.w	8000bfe <__udivmoddi4+0x21a>
 8000ada:	eba1 010c 	sub.w	r1, r1, ip
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	0c20      	lsrs	r0, r4, #16
 8000aea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aee:	fb07 1113 	mls	r1, r7, r3, r1
 8000af2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af6:	fb0e f003 	mul.w	r0, lr, r3
 8000afa:	4288      	cmp	r0, r1
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x12c>
 8000afe:	eb1c 0101 	adds.w	r1, ip, r1
 8000b02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x12a>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2c0>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	1a09      	subs	r1, r1, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b18:	fb07 1110 	mls	r1, r7, r0, r1
 8000b1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x156>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x154>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2ca>
 8000b38:	4608      	mov	r0, r1
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b42:	e79c      	b.n	8000a7e <__udivmoddi4+0x9a>
 8000b44:	f1c6 0720 	rsb	r7, r6, #32
 8000b48:	40b3      	lsls	r3, r6
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa20 f407 	lsr.w	r4, r0, r7
 8000b56:	fa01 f306 	lsl.w	r3, r1, r6
 8000b5a:	431c      	orrs	r4, r3
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b62:	fa00 f306 	lsl.w	r3, r0, r6
 8000b66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b6a:	0c20      	lsrs	r0, r4, #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fb09 1118 	mls	r1, r9, r8, r1
 8000b74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b78:	fb08 f00e 	mul.w	r0, r8, lr
 8000b7c:	4288      	cmp	r0, r1
 8000b7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b8>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b90:	4288      	cmp	r0, r1
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4461      	add	r1, ip
 8000b9c:	1a09      	subs	r1, r1, r0
 8000b9e:	b2a4      	uxth	r4, r4
 8000ba0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ba4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ba8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bb0:	458e      	cmp	lr, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1e2>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2b4>
 8000bbe:	458e      	cmp	lr, r1
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2b4>
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bca:	fba0 9402 	umull	r9, r4, r0, r2
 8000bce:	eba1 010e 	sub.w	r1, r1, lr
 8000bd2:	42a1      	cmp	r1, r4
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46a6      	mov	lr, r4
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x2a4>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x2a0>
 8000bdc:	b15d      	cbz	r5, 8000bf6 <__udivmoddi4+0x212>
 8000bde:	ebb3 0208 	subs.w	r2, r3, r8
 8000be2:	eb61 010e 	sbc.w	r1, r1, lr
 8000be6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bea:	fa22 f306 	lsr.w	r3, r2, r6
 8000bee:	40f1      	lsrs	r1, r6
 8000bf0:	431f      	orrs	r7, r3
 8000bf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000bf6:	2600      	movs	r6, #0
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	40d8      	lsrs	r0, r3
 8000c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c08:	fa21 f303 	lsr.w	r3, r1, r3
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4301      	orrs	r1, r0
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c20:	0c0b      	lsrs	r3, r1, #16
 8000c22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c26:	fb00 f60e 	mul.w	r6, r0, lr
 8000c2a:	429e      	cmp	r6, r3
 8000c2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x260>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b8>
 8000c3c:	429e      	cmp	r6, r3
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b8>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	b289      	uxth	r1, r1
 8000c48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb06 f30e 	mul.w	r3, r6, lr
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x28a>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c66:	428b      	cmp	r3, r1
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c6a:	3e02      	subs	r6, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	1ac9      	subs	r1, r1, r3
 8000c70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0x104>
 8000c76:	462e      	mov	r6, r5
 8000c78:	4628      	mov	r0, r5
 8000c7a:	e705      	b.n	8000a88 <__udivmoddi4+0xa4>
 8000c7c:	4606      	mov	r6, r0
 8000c7e:	e6e3      	b.n	8000a48 <__udivmoddi4+0x64>
 8000c80:	4618      	mov	r0, r3
 8000c82:	e6f8      	b.n	8000a76 <__udivmoddi4+0x92>
 8000c84:	454b      	cmp	r3, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f8>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c90:	3801      	subs	r0, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f8>
 8000c94:	4646      	mov	r6, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x28a>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1e2>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x260>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b8>
 8000ca4:	3b02      	subs	r3, #2
 8000ca6:	4461      	add	r1, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x12c>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e709      	b.n	8000ac2 <__udivmoddi4+0xde>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x156>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbc:	f000 fbf8 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc0:	f000 f826 	bl	8000d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc4:	f000 f93a 	bl	8000f3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc8:	f000 f918 	bl	8000efc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ccc:	f000 f8ec 	bl	8000ea8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000cd0:	f000 f888 	bl	8000de4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adcRawData, 20);
 8000cd4:	2214      	movs	r2, #20
 8000cd6:	490b      	ldr	r1, [pc, #44]	; (8000d04 <main+0x4c>)
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <main+0x50>)
 8000cda:	f000 fdaf 	bl	800183c <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		static uint32_t timestamp = 0;
		if (HAL_GetTick() >= timestamp) {
 8000cde:	f000 fc4d 	bl	800157c <HAL_GetTick>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <main+0x54>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d3f8      	bcc.n	8000cde <main+0x26>
			timestamp = HAL_GetTick() + 1000;
 8000cec:	f000 fc46 	bl	800157c <HAL_GetTick>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <main+0x54>)
 8000cf8:	6013      	str	r3, [r2, #0]
			VoltageConverter();
 8000cfa:	f000 f995 	bl	8001028 <VoltageConverter>
			TemperatureConverter();
 8000cfe:	f000 f9e7 	bl	80010d0 <TemperatureConverter>
  {
 8000d02:	e7ec      	b.n	8000cde <main+0x26>
 8000d04:	20000114 	.word	0x20000114
 8000d08:	20000028 	.word	0x20000028
 8000d0c:	2000014c 	.word	0x2000014c

08000d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b094      	sub	sp, #80	; 0x50
 8000d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d16:	f107 0320 	add.w	r3, r7, #32
 8000d1a:	2230      	movs	r2, #48	; 0x30
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 ff20 	bl	8003b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <SystemClock_Config+0xcc>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	4a27      	ldr	r2, [pc, #156]	; (8000ddc <SystemClock_Config+0xcc>)
 8000d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d42:	6413      	str	r3, [r2, #64]	; 0x40
 8000d44:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <SystemClock_Config+0xcc>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <SystemClock_Config+0xd0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <SystemClock_Config+0xd0>)
 8000d5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <SystemClock_Config+0xd0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d70:	2301      	movs	r3, #1
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d74:	2310      	movs	r3, #16
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d80:	2310      	movs	r3, #16
 8000d82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d84:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d92:	f107 0320 	add.w	r3, r7, #32
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 ff66 	bl	8002c68 <HAL_RCC_OscConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000da2:	f000 fa0d 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da6:	230f      	movs	r3, #15
 8000da8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000daa:	2302      	movs	r3, #2
 8000dac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 f9c8 	bl	8003158 <HAL_RCC_ClockConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000dce:	f000 f9f7 	bl	80011c0 <Error_Handler>
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3750      	adds	r7, #80	; 0x50
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40007000 	.word	0x40007000

08000de4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000df6:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <MX_ADC1_Init+0xb4>)
 8000df8:	4a28      	ldr	r2, [pc, #160]	; (8000e9c <MX_ADC1_Init+0xb8>)
 8000dfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dfc:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <MX_ADC1_Init+0xb4>)
 8000dfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e04:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <MX_ADC1_Init+0xb4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e0a:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <MX_ADC1_Init+0xb4>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e10:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <MX_ADC1_Init+0xb4>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <MX_ADC1_Init+0xb4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <MX_ADC1_Init+0xb4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e24:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_ADC1_Init+0xb4>)
 8000e26:	4a1e      	ldr	r2, [pc, #120]	; (8000ea0 <MX_ADC1_Init+0xbc>)
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e2a:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <MX_ADC1_Init+0xb4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000e30:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <MX_ADC1_Init+0xb4>)
 8000e32:	2202      	movs	r2, #2
 8000e34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e36:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <MX_ADC1_Init+0xb4>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_ADC1_Init+0xb4>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e44:	4814      	ldr	r0, [pc, #80]	; (8000e98 <MX_ADC1_Init+0xb4>)
 8000e46:	f000 fba5 	bl	8001594 <HAL_ADC_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e50:	f000 f9b6 	bl	80011c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e60:	463b      	mov	r3, r7
 8000e62:	4619      	mov	r1, r3
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <MX_ADC1_Init+0xb4>)
 8000e66:	f000 fe01 	bl	8001a6c <HAL_ADC_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e70:	f000 f9a6 	bl	80011c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_ADC1_Init+0xc0>)
 8000e76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_ADC1_Init+0xb4>)
 8000e82:	f000 fdf3 	bl	8001a6c <HAL_ADC_ConfigChannel>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e8c:	f000 f998 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000028 	.word	0x20000028
 8000e9c:	40012000 	.word	0x40012000
 8000ea0:	0f000001 	.word	0x0f000001
 8000ea4:	10000012 	.word	0x10000012

08000ea8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <MX_USART2_UART_Init+0x50>)
 8000eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	f002 fb5a 	bl	8003598 <HAL_UART_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eea:	f000 f969 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000d0 	.word	0x200000d0
 8000ef8:	40004400 	.word	0x40004400

08000efc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_DMA_Init+0x3c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <MX_DMA_Init+0x3c>)
 8000f0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_DMA_Init+0x3c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2038      	movs	r0, #56	; 0x38
 8000f24:	f001 f937 	bl	8002196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f28:	2038      	movs	r0, #56	; 0x38
 8000f2a:	f001 f950 	bl	80021ce <HAL_NVIC_EnableIRQ>

}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <MX_GPIO_Init+0xe0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a30      	ldr	r2, [pc, #192]	; (800101c <MX_GPIO_Init+0xe0>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b2e      	ldr	r3, [pc, #184]	; (800101c <MX_GPIO_Init+0xe0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <MX_GPIO_Init+0xe0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a29      	ldr	r2, [pc, #164]	; (800101c <MX_GPIO_Init+0xe0>)
 8000f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b27      	ldr	r3, [pc, #156]	; (800101c <MX_GPIO_Init+0xe0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	4b23      	ldr	r3, [pc, #140]	; (800101c <MX_GPIO_Init+0xe0>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a22      	ldr	r2, [pc, #136]	; (800101c <MX_GPIO_Init+0xe0>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b20      	ldr	r3, [pc, #128]	; (800101c <MX_GPIO_Init+0xe0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <MX_GPIO_Init+0xe0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a1b      	ldr	r2, [pc, #108]	; (800101c <MX_GPIO_Init+0xe0>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <MX_GPIO_Init+0xe0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	4816      	ldr	r0, [pc, #88]	; (8001020 <MX_GPIO_Init+0xe4>)
 8000fc8:	f001 fe10 	bl	8002bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4810      	ldr	r0, [pc, #64]	; (8001024 <MX_GPIO_Init+0xe8>)
 8000fe4:	f001 fc7e 	bl	80028e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fe8:	2320      	movs	r3, #32
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4808      	ldr	r0, [pc, #32]	; (8001020 <MX_GPIO_Init+0xe4>)
 8001000:	f001 fc70 	bl	80028e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	2028      	movs	r0, #40	; 0x28
 800100a:	f001 f8c4 	bl	8002196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800100e:	2028      	movs	r0, #40	; 0x28
 8001010:	f001 f8dd 	bl	80021ce <HAL_NVIC_EnableIRQ>

}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	; 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020800 	.word	0x40020800

08001028 <VoltageConverter>:

/* USER CODE BEGIN 4 */


void VoltageConverter() {
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	af00      	add	r7, sp, #0
	register int i, GetV;
	for (i = 0; i < 20; i += 2) {
 800102c:	2400      	movs	r4, #0
 800102e:	e004      	b.n	800103a <VoltageConverter+0x12>
		GetV += adcRawData[i];
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <VoltageConverter+0x90>)
 8001032:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001036:	441d      	add	r5, r3
	for (i = 0; i < 20; i += 2) {
 8001038:	3402      	adds	r4, #2
 800103a:	2c13      	cmp	r4, #19
 800103c:	ddf8      	ble.n	8001030 <VoltageConverter+0x8>
	}
	bitV = GetV / 10; //average ADC voltage bit
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <VoltageConverter+0x94>)
 8001040:	fb83 2305 	smull	r2, r3, r3, r5
 8001044:	109a      	asrs	r2, r3, #2
 8001046:	17eb      	asrs	r3, r5, #31
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	b29a      	uxth	r2, r3
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <VoltageConverter+0x98>)
 800104e:	801a      	strh	r2, [r3, #0]
	Vin25 = bitV * 0.8; //change bit to voltage //by *3.3/4095==0.8mv==0.0008v //output voltage from resistor
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <VoltageConverter+0x98>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa11 	bl	800047c <__aeabi_i2d>
 800105a:	a313      	add	r3, pc, #76	; (adr r3, 80010a8 <VoltageConverter+0x80>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fa76 	bl	8000550 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fc82 	bl	8000974 <__aeabi_d2uiz>
 8001070:	4603      	mov	r3, r0
 8001072:	b29a      	uxth	r2, r3
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <VoltageConverter+0x9c>)
 8001076:	801a      	strh	r2, [r3, #0]
	Vin50 = bitV * 1.6; //change bit to voltage and gain for 5V by *2
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <VoltageConverter+0x98>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f9fd 	bl	800047c <__aeabi_i2d>
 8001082:	a30b      	add	r3, pc, #44	; (adr r3, 80010b0 <VoltageConverter+0x88>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff fa62 	bl	8000550 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fc6e 	bl	8000974 <__aeabi_d2uiz>
 8001098:	4603      	mov	r3, r0
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <VoltageConverter+0xa0>)
 800109e:	801a      	strh	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	bdb0      	pop	{r4, r5, r7, pc}
 80010a4:	f3af 8000 	nop.w
 80010a8:	9999999a 	.word	0x9999999a
 80010ac:	3fe99999 	.word	0x3fe99999
 80010b0:	9999999a 	.word	0x9999999a
 80010b4:	3ff99999 	.word	0x3ff99999
 80010b8:	20000114 	.word	0x20000114
 80010bc:	66666667 	.word	0x66666667
 80010c0:	2000013c 	.word	0x2000013c
 80010c4:	20000140 	.word	0x20000140
 80010c8:	20000142 	.word	0x20000142
 80010cc:	00000000 	.word	0x00000000

080010d0 <TemperatureConverter>:

void TemperatureConverter() {
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	register int i, GetT;
	for (i = 1; i < 20; i += 2) {
 80010d4:	2401      	movs	r4, #1
 80010d6:	e004      	b.n	80010e2 <TemperatureConverter+0x12>
		GetT += adcRawData[i];
 80010d8:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <TemperatureConverter+0xd0>)
 80010da:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80010de:	441d      	add	r5, r3
	for (i = 1; i < 20; i += 2) {
 80010e0:	3402      	adds	r4, #2
 80010e2:	2c13      	cmp	r4, #19
 80010e4:	ddf8      	ble.n	80010d8 <TemperatureConverter+0x8>
	}
	bitT = GetT / 10;
 80010e6:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <TemperatureConverter+0xd4>)
 80010e8:	fb83 2305 	smull	r2, r3, r3, r5
 80010ec:	109a      	asrs	r2, r3, #2
 80010ee:	17eb      	asrs	r3, r5, #31
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <TemperatureConverter+0xd8>)
 80010f6:	801a      	strh	r2, [r3, #0]

	GetVSense = (bitT*0.8); //change bit to voltage
 80010f8:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <TemperatureConverter+0xd8>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f9bd 	bl	800047c <__aeabi_i2d>
 8001102:	a323      	add	r3, pc, #140	; (adr r3, 8001190 <TemperatureConverter+0xc0>)
 8001104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001108:	f7ff fa22 	bl	8000550 <__aeabi_dmul>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fc2e 	bl	8000974 <__aeabi_d2uiz>
 8001118:	4603      	mov	r3, r0
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <TemperatureConverter+0xdc>)
 800111e:	801a      	strh	r2, [r3, #0]
	C = ((GetVSense-760)/2.5)+25;
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <TemperatureConverter+0xdc>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f9a7 	bl	800047c <__aeabi_i2d>
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <TemperatureConverter+0xe0>)
 8001134:	f7ff fb36 	bl	80007a4 <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <TemperatureConverter+0xe4>)
 8001146:	f7ff f84d 	bl	80001e4 <__adddf3>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff fc0f 	bl	8000974 <__aeabi_d2uiz>
 8001156:	4603      	mov	r3, r0
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <TemperatureConverter+0xe8>)
 800115c:	801a      	strh	r2, [r3, #0]
	K = C + 273.15;
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <TemperatureConverter+0xe8>)
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff f98a 	bl	800047c <__aeabi_i2d>
 8001168:	a30b      	add	r3, pc, #44	; (adr r3, 8001198 <TemperatureConverter+0xc8>)
 800116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116e:	f7ff f839 	bl	80001e4 <__adddf3>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f7ff fbfb 	bl	8000974 <__aeabi_d2uiz>
 800117e:	4603      	mov	r3, r0
 8001180:	b29a      	uxth	r2, r3
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <TemperatureConverter+0xec>)
 8001184:	801a      	strh	r2, [r3, #0]
}
 8001186:	bf00      	nop
 8001188:	bdb0      	pop	{r4, r5, r7, pc}
 800118a:	bf00      	nop
 800118c:	f3af 8000 	nop.w
 8001190:	9999999a 	.word	0x9999999a
 8001194:	3fe99999 	.word	0x3fe99999
 8001198:	66666666 	.word	0x66666666
 800119c:	40711266 	.word	0x40711266
 80011a0:	20000114 	.word	0x20000114
 80011a4:	66666667 	.word	0x66666667
 80011a8:	2000013e 	.word	0x2000013e
 80011ac:	20000148 	.word	0x20000148
 80011b0:	40040000 	.word	0x40040000
 80011b4:	40390000 	.word	0x40390000
 80011b8:	20000146 	.word	0x20000146
 80011bc:	20000144 	.word	0x20000144

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <Error_Handler+0x8>
	...

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a0f      	ldr	r2, [pc, #60]	; (8001218 <HAL_MspInit+0x4c>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_MspInit+0x4c>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800120a:	2007      	movs	r0, #7
 800120c:	f000 ffb8 	bl	8002180 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800

0800121c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a33      	ldr	r2, [pc, #204]	; (8001308 <HAL_ADC_MspInit+0xec>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d15f      	bne.n	80012fe <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b32      	ldr	r3, [pc, #200]	; (800130c <HAL_ADC_MspInit+0xf0>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a31      	ldr	r2, [pc, #196]	; (800130c <HAL_ADC_MspInit+0xf0>)
 8001248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b2f      	ldr	r3, [pc, #188]	; (800130c <HAL_ADC_MspInit+0xf0>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b2b      	ldr	r3, [pc, #172]	; (800130c <HAL_ADC_MspInit+0xf0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a2a      	ldr	r2, [pc, #168]	; (800130c <HAL_ADC_MspInit+0xf0>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b28      	ldr	r3, [pc, #160]	; (800130c <HAL_ADC_MspInit+0xf0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001276:	2301      	movs	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127a:	2303      	movs	r3, #3
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	4821      	ldr	r0, [pc, #132]	; (8001310 <HAL_ADC_MspInit+0xf4>)
 800128a:	f001 fb2b 	bl	80028e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 8001290:	4a21      	ldr	r2, [pc, #132]	; (8001318 <HAL_ADC_MspInit+0xfc>)
 8001292:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001294:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800129a:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012a6:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012d2:	4810      	ldr	r0, [pc, #64]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012d4:	f000 ff96 	bl	8002204 <HAL_DMA_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80012de:	f7ff ff6f 	bl	80011c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012e6:	639a      	str	r2, [r3, #56]	; 0x38
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <HAL_ADC_MspInit+0xf8>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2012      	movs	r0, #18
 80012f4:	f000 ff4f 	bl	8002196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012f8:	2012      	movs	r0, #18
 80012fa:	f000 ff68 	bl	80021ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012fe:	bf00      	nop
 8001300:	3728      	adds	r7, #40	; 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40012000 	.word	0x40012000
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000
 8001314:	20000070 	.word	0x20000070
 8001318:	40026410 	.word	0x40026410

0800131c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a19      	ldr	r2, [pc, #100]	; (80013a0 <HAL_UART_MspInit+0x84>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d12b      	bne.n	8001396 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_UART_MspInit+0x88>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <HAL_UART_MspInit+0x88>)
 8001348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_UART_MspInit+0x88>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_UART_MspInit+0x88>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a10      	ldr	r2, [pc, #64]	; (80013a4 <HAL_UART_MspInit+0x88>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_UART_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001376:	230c      	movs	r3, #12
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001386:	2307      	movs	r3, #7
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <HAL_UART_MspInit+0x8c>)
 8001392:	f001 faa7 	bl	80028e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	; 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40004400 	.word	0x40004400
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020000 	.word	0x40020000

080013ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <NMI_Handler+0x4>

080013b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <HardFault_Handler+0x4>

080013b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <MemManage_Handler+0x4>

080013be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <BusFault_Handler+0x4>

080013c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <UsageFault_Handler+0x4>

080013ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f8:	f000 f8ac 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <ADC_IRQHandler+0x10>)
 8001406:	f000 f908 	bl	800161a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000028 	.word	0x20000028

08001414 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001418:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800141c:	f001 fc00 	bl	8002c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <DMA2_Stream0_IRQHandler+0x10>)
 800142a:	f000 fff1 	bl	8002410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000070 	.word	0x20000070

08001438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <SystemInit+0x20>)
 800143e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001442:	4a05      	ldr	r2, [pc, #20]	; (8001458 <SystemInit+0x20>)
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001494 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001462:	490e      	ldr	r1, [pc, #56]	; (800149c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001464:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001468:	e002      	b.n	8001470 <LoopCopyDataInit>

0800146a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800146c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146e:	3304      	adds	r3, #4

08001470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001474:	d3f9      	bcc.n	800146a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001478:	4c0b      	ldr	r4, [pc, #44]	; (80014a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800147a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800147c:	e001      	b.n	8001482 <LoopFillZerobss>

0800147e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001480:	3204      	adds	r2, #4

08001482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001484:	d3fb      	bcc.n	800147e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001486:	f7ff ffd7 	bl	8001438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148a:	f002 fb47 	bl	8003b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148e:	f7ff fc13 	bl	8000cb8 <main>
  bx  lr    
 8001492:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001494:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014a0:	08003bbc 	.word	0x08003bbc
  ldr r2, =_sbss
 80014a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014a8:	20000154 	.word	0x20000154

080014ac <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <DMA1_Stream0_IRQHandler>
	...

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <HAL_Init+0x40>)
 80014ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_Init+0x40>)
 80014c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_Init+0x40>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 fe51 	bl	8002180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fe72 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fe69 	bl	80021ea <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f000 fe31 	bl	8002196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000000 	.word	0x20000000
 800154c:	20000008 	.word	0x20000008
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008
 8001578:	20000150 	.word	0x20000150

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000150 	.word	0x20000150

08001594 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e033      	b.n	8001612 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fe32 	bl	800121c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d118      	bne.n	8001604 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015da:	f023 0302 	bic.w	r3, r3, #2
 80015de:	f043 0202 	orr.w	r2, r3, #2
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fb72 	bl	8001cd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f023 0303 	bic.w	r3, r3, #3
 80015fa:	f043 0201 	orr.w	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	641a      	str	r2, [r3, #64]	; 0x40
 8001602:	e001      	b.n	8001608 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f003 0320 	and.w	r3, r3, #32
 8001648:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d049      	beq.n	80016e4 <HAL_ADC_IRQHandler+0xca>
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d046      	beq.n	80016e4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	d105      	bne.n	800166e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d12b      	bne.n	80016d4 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001680:	2b00      	cmp	r3, #0
 8001682:	d127      	bne.n	80016d4 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800168e:	2b00      	cmp	r3, #0
 8001690:	d006      	beq.n	80016a0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800169c:	2b00      	cmp	r3, #0
 800169e:	d119      	bne.n	80016d4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0220 	bic.w	r2, r2, #32
 80016ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d105      	bne.n	80016d4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f043 0201 	orr.w	r2, r3, #1
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f9a1 	bl	8001a1c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f06f 0212 	mvn.w	r2, #18
 80016e2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d057      	beq.n	80017aa <HAL_ADC_IRQHandler+0x190>
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d054      	beq.n	80017aa <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d139      	bne.n	800179a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800173e:	2b00      	cmp	r3, #0
 8001740:	d12b      	bne.n	800179a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800174c:	2b00      	cmp	r3, #0
 800174e:	d124      	bne.n	800179a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800175a:	2b00      	cmp	r3, #0
 800175c:	d11d      	bne.n	800179a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001762:	2b00      	cmp	r3, #0
 8001764:	d119      	bne.n	800179a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001774:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178a:	2b00      	cmp	r3, #0
 800178c:	d105      	bne.n	800179a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f043 0201 	orr.w	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fc16 	bl	8001fcc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f06f 020c 	mvn.w	r2, #12
 80017a8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d017      	beq.n	80017f0 <HAL_ADC_IRQHandler+0x1d6>
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d014      	beq.n	80017f0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d10d      	bne.n	80017f0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f92f 	bl	8001a44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f06f 0201 	mvn.w	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0320 	and.w	r3, r3, #32
 80017f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017fe:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d015      	beq.n	8001832 <HAL_ADC_IRQHandler+0x218>
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d012      	beq.n	8001832 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	f043 0202 	orr.w	r2, r3, #2
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0220 	mvn.w	r2, #32
 8001820:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f918 	bl	8001a58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f06f 0220 	mvn.w	r2, #32
 8001830:	601a      	str	r2, [r3, #0]
  }
}
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_ADC_Start_DMA+0x1e>
 8001856:	2302      	movs	r3, #2
 8001858:	e0ce      	b.n	80019f8 <HAL_ADC_Start_DMA+0x1bc>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b01      	cmp	r3, #1
 800186e:	d018      	beq.n	80018a2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001880:	4b5f      	ldr	r3, [pc, #380]	; (8001a00 <HAL_ADC_Start_DMA+0x1c4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a5f      	ldr	r2, [pc, #380]	; (8001a04 <HAL_ADC_Start_DMA+0x1c8>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	0c9a      	lsrs	r2, r3, #18
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001894:	e002      	b.n	800189c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	3b01      	subs	r3, #1
 800189a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f9      	bne.n	8001896 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018b0:	d107      	bne.n	80018c2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	f040 8086 	bne.w	80019de <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018da:	f023 0301 	bic.w	r3, r3, #1
 80018de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d007      	beq.n	8001904 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800190c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001910:	d106      	bne.n	8001920 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f023 0206 	bic.w	r2, r3, #6
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	645a      	str	r2, [r3, #68]	; 0x44
 800191e:	e002      	b.n	8001926 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800192e:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <HAL_ADC_Start_DMA+0x1cc>)
 8001930:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001936:	4a35      	ldr	r2, [pc, #212]	; (8001a0c <HAL_ADC_Start_DMA+0x1d0>)
 8001938:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193e:	4a34      	ldr	r2, [pc, #208]	; (8001a10 <HAL_ADC_Start_DMA+0x1d4>)
 8001940:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001946:	4a33      	ldr	r2, [pc, #204]	; (8001a14 <HAL_ADC_Start_DMA+0x1d8>)
 8001948:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001952:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001962:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001972:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	334c      	adds	r3, #76	; 0x4c
 800197e:	4619      	mov	r1, r3
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f000 fcec 	bl	8002360 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10f      	bne.n	80019b4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d129      	bne.n	80019f6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	e020      	b.n	80019f6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a17      	ldr	r2, [pc, #92]	; (8001a18 <HAL_ADC_Start_DMA+0x1dc>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d11b      	bne.n	80019f6 <HAL_ADC_Start_DMA+0x1ba>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d114      	bne.n	80019f6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	e00b      	b.n	80019f6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f043 0210 	orr.w	r2, r3, #16
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f043 0201 	orr.w	r2, r3, #1
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000000 	.word	0x20000000
 8001a04:	431bde83 	.word	0x431bde83
 8001a08:	40012300 	.word	0x40012300
 8001a0c:	08001ec9 	.word	0x08001ec9
 8001a10:	08001f83 	.word	0x08001f83
 8001a14:	08001f9f 	.word	0x08001f9f
 8001a18:	40012000 	.word	0x40012000

08001a1c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1c>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e113      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x244>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b09      	cmp	r3, #9
 8001a96:	d925      	bls.n	8001ae4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68d9      	ldr	r1, [r3, #12]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	3b1e      	subs	r3, #30
 8001aae:	2207      	movs	r2, #7
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43da      	mvns	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	400a      	ands	r2, r1
 8001abc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68d9      	ldr	r1, [r3, #12]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4403      	add	r3, r0
 8001ad6:	3b1e      	subs	r3, #30
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	e022      	b.n	8001b2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6919      	ldr	r1, [r3, #16]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	2207      	movs	r2, #7
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	400a      	ands	r2, r1
 8001b06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6919      	ldr	r1, [r3, #16]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4403      	add	r3, r0
 8001b20:	409a      	lsls	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d824      	bhi.n	8001b7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	3b05      	subs	r3, #5
 8001b44:	221f      	movs	r2, #31
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	400a      	ands	r2, r1
 8001b52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b05      	subs	r3, #5
 8001b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	635a      	str	r2, [r3, #52]	; 0x34
 8001b7a:	e04c      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	d824      	bhi.n	8001bce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	3b23      	subs	r3, #35	; 0x23
 8001b96:	221f      	movs	r2, #31
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43da      	mvns	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3b23      	subs	r3, #35	; 0x23
 8001bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	631a      	str	r2, [r3, #48]	; 0x30
 8001bcc:	e023      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	3b41      	subs	r3, #65	; 0x41
 8001be0:	221f      	movs	r2, #31
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	400a      	ands	r2, r1
 8001bee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	3b41      	subs	r3, #65	; 0x41
 8001c0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <HAL_ADC_ConfigChannel+0x250>)
 8001c18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a28      	ldr	r2, [pc, #160]	; (8001cc0 <HAL_ADC_ConfigChannel+0x254>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d10f      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x1d8>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b12      	cmp	r3, #18
 8001c2a:	d10b      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1d      	ldr	r2, [pc, #116]	; (8001cc0 <HAL_ADC_ConfigChannel+0x254>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d12b      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x23a>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1c      	ldr	r2, [pc, #112]	; (8001cc4 <HAL_ADC_ConfigChannel+0x258>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d003      	beq.n	8001c60 <HAL_ADC_ConfigChannel+0x1f4>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b11      	cmp	r3, #17
 8001c5e:	d122      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a11      	ldr	r2, [pc, #68]	; (8001cc4 <HAL_ADC_ConfigChannel+0x258>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d111      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_ADC_ConfigChannel+0x25c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a11      	ldr	r2, [pc, #68]	; (8001ccc <HAL_ADC_ConfigChannel+0x260>)
 8001c88:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8c:	0c9a      	lsrs	r2, r3, #18
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c98:	e002      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f9      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	40012300 	.word	0x40012300
 8001cc0:	40012000 	.word	0x40012000
 8001cc4:	10000012 	.word	0x10000012
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	431bde83 	.word	0x431bde83

08001cd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd8:	4b79      	ldr	r3, [pc, #484]	; (8001ec0 <ADC_Init+0x1f0>)
 8001cda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6859      	ldr	r1, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	021a      	lsls	r2, r3, #8
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6859      	ldr	r1, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6899      	ldr	r1, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <ADC_Init+0x1f4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d022      	beq.n	8001dae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6899      	ldr	r1, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6899      	ldr	r1, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	e00f      	b.n	8001dce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0202 	bic.w	r2, r2, #2
 8001ddc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6899      	ldr	r1, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7e1b      	ldrb	r3, [r3, #24]
 8001de8:	005a      	lsls	r2, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	3b01      	subs	r3, #1
 8001e28:	035a      	lsls	r2, r3, #13
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	e007      	b.n	8001e44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	051a      	lsls	r2, r3, #20
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6899      	ldr	r1, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e86:	025a      	lsls	r2, r3, #9
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6899      	ldr	r1, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	029a      	lsls	r2, r3, #10
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	609a      	str	r2, [r3, #8]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	40012300 	.word	0x40012300
 8001ec4:	0f000001 	.word	0x0f000001

08001ec8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d13c      	bne.n	8001f5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d12b      	bne.n	8001f54 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d127      	bne.n	8001f54 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d006      	beq.n	8001f20 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d119      	bne.n	8001f54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0220 	bic.w	r2, r2, #32
 8001f2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f7ff fd61 	bl	8001a1c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f5a:	e00e      	b.n	8001f7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f003 0310 	and.w	r3, r3, #16
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f7ff fd75 	bl	8001a58 <HAL_ADC_ErrorCallback>
}
 8001f6e:	e004      	b.n	8001f7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	4798      	blx	r3
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f7ff fd4d 	bl	8001a30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001faa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2240      	movs	r2, #64	; 0x40
 8001fb0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f043 0204 	orr.w	r2, r3, #4
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7ff fd4a 	bl	8001a58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800200c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002012:	4a04      	ldr	r2, [pc, #16]	; (8002024 <__NVIC_SetPriorityGrouping+0x44>)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	60d3      	str	r3, [r2, #12]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <__NVIC_GetPriorityGrouping+0x18>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	f003 0307 	and.w	r3, r3, #7
}
 8002036:	4618      	mov	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	2b00      	cmp	r3, #0
 8002054:	db0b      	blt.n	800206e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	f003 021f 	and.w	r2, r3, #31
 800205c:	4907      	ldr	r1, [pc, #28]	; (800207c <__NVIC_EnableIRQ+0x38>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	2001      	movs	r0, #1
 8002066:	fa00 f202 	lsl.w	r2, r0, r2
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000e100 	.word	0xe000e100

08002080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	6039      	str	r1, [r7, #0]
 800208a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	2b00      	cmp	r3, #0
 8002092:	db0a      	blt.n	80020aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	490c      	ldr	r1, [pc, #48]	; (80020cc <__NVIC_SetPriority+0x4c>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	0112      	lsls	r2, r2, #4
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	440b      	add	r3, r1
 80020a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a8:	e00a      	b.n	80020c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4908      	ldr	r1, [pc, #32]	; (80020d0 <__NVIC_SetPriority+0x50>)
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	3b04      	subs	r3, #4
 80020b8:	0112      	lsls	r2, r2, #4
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	440b      	add	r3, r1
 80020be:	761a      	strb	r2, [r3, #24]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000e100 	.word	0xe000e100
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f1c3 0307 	rsb	r3, r3, #7
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	bf28      	it	cs
 80020f2:	2304      	movcs	r3, #4
 80020f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3304      	adds	r3, #4
 80020fa:	2b06      	cmp	r3, #6
 80020fc:	d902      	bls.n	8002104 <NVIC_EncodePriority+0x30>
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3b03      	subs	r3, #3
 8002102:	e000      	b.n	8002106 <NVIC_EncodePriority+0x32>
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002108:	f04f 32ff 	mov.w	r2, #4294967295
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43da      	mvns	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	401a      	ands	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800211c:	f04f 31ff 	mov.w	r1, #4294967295
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	43d9      	mvns	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	4313      	orrs	r3, r2
         );
}
 800212e:	4618      	mov	r0, r3
 8002130:	3724      	adds	r7, #36	; 0x24
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800214c:	d301      	bcc.n	8002152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800214e:	2301      	movs	r3, #1
 8002150:	e00f      	b.n	8002172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002152:	4a0a      	ldr	r2, [pc, #40]	; (800217c <SysTick_Config+0x40>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215a:	210f      	movs	r1, #15
 800215c:	f04f 30ff 	mov.w	r0, #4294967295
 8002160:	f7ff ff8e 	bl	8002080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <SysTick_Config+0x40>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216a:	4b04      	ldr	r3, [pc, #16]	; (800217c <SysTick_Config+0x40>)
 800216c:	2207      	movs	r2, #7
 800216e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	e000e010 	.word	0xe000e010

08002180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ff29 	bl	8001fe0 <__NVIC_SetPriorityGrouping>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a8:	f7ff ff3e 	bl	8002028 <__NVIC_GetPriorityGrouping>
 80021ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	6978      	ldr	r0, [r7, #20]
 80021b4:	f7ff ff8e 	bl	80020d4 <NVIC_EncodePriority>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff5d 	bl	8002080 <__NVIC_SetPriority>
}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff31 	bl	8002044 <__NVIC_EnableIRQ>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ffa2 	bl	800213c <SysTick_Config>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002210:	f7ff f9b4 	bl	800157c <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e099      	b.n	8002354 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002240:	e00f      	b.n	8002262 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002242:	f7ff f99b 	bl	800157c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b05      	cmp	r3, #5
 800224e:	d908      	bls.n	8002262 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2203      	movs	r2, #3
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e078      	b.n	8002354 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1e8      	bne.n	8002242 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	4b38      	ldr	r3, [pc, #224]	; (800235c <HAL_DMA_Init+0x158>)
 800227c:	4013      	ands	r3, r2
 800227e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800228e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d107      	bne.n	80022cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	4313      	orrs	r3, r2
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f023 0307 	bic.w	r3, r3, #7
 80022e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d117      	bne.n	8002326 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00e      	beq.n	8002326 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fa6f 	bl	80027ec <DMA_CheckFifoParam>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2240      	movs	r2, #64	; 0x40
 8002318:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002322:	2301      	movs	r3, #1
 8002324:	e016      	b.n	8002354 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 fa26 	bl	8002780 <DMA_CalcBaseAndBitshift>
 8002334:	4603      	mov	r3, r0
 8002336:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233c:	223f      	movs	r2, #63	; 0x3f
 800233e:	409a      	lsls	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	f010803f 	.word	0xf010803f

08002360 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_DMA_Start_IT+0x26>
 8002382:	2302      	movs	r3, #2
 8002384:	e040      	b.n	8002408 <HAL_DMA_Start_IT+0xa8>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d12f      	bne.n	80023fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2202      	movs	r2, #2
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f9b8 	bl	8002724 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b8:	223f      	movs	r2, #63	; 0x3f
 80023ba:	409a      	lsls	r2, r3
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0216 	orr.w	r2, r2, #22
 80023ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0208 	orr.w	r2, r2, #8
 80023e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	e005      	b.n	8002406 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002402:	2302      	movs	r3, #2
 8002404:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002406:	7dfb      	ldrb	r3, [r7, #23]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800241c:	4b8e      	ldr	r3, [pc, #568]	; (8002658 <HAL_DMA_IRQHandler+0x248>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a8e      	ldr	r2, [pc, #568]	; (800265c <HAL_DMA_IRQHandler+0x24c>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	0a9b      	lsrs	r3, r3, #10
 8002428:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	2208      	movs	r2, #8
 800243c:	409a      	lsls	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d01a      	beq.n	800247c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d013      	beq.n	800247c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0204 	bic.w	r2, r2, #4
 8002462:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002468:	2208      	movs	r2, #8
 800246a:	409a      	lsls	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002474:	f043 0201 	orr.w	r2, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	2201      	movs	r2, #1
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d012      	beq.n	80024b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249e:	2201      	movs	r2, #1
 80024a0:	409a      	lsls	r2, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	f043 0202 	orr.w	r2, r3, #2
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b6:	2204      	movs	r2, #4
 80024b8:	409a      	lsls	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4013      	ands	r3, r2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d012      	beq.n	80024e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00b      	beq.n	80024e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	2204      	movs	r2, #4
 80024d6:	409a      	lsls	r2, r3
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e0:	f043 0204 	orr.w	r2, r3, #4
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ec:	2210      	movs	r2, #16
 80024ee:	409a      	lsls	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d043      	beq.n	8002580 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d03c      	beq.n	8002580 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	2210      	movs	r2, #16
 800250c:	409a      	lsls	r2, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d018      	beq.n	8002552 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d108      	bne.n	8002540 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d024      	beq.n	8002580 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4798      	blx	r3
 800253e:	e01f      	b.n	8002580 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01b      	beq.n	8002580 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4798      	blx	r3
 8002550:	e016      	b.n	8002580 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255c:	2b00      	cmp	r3, #0
 800255e:	d107      	bne.n	8002570 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0208 	bic.w	r2, r2, #8
 800256e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	2220      	movs	r2, #32
 8002586:	409a      	lsls	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 808f 	beq.w	80026b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8087 	beq.w	80026b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	2220      	movs	r2, #32
 80025a8:	409a      	lsls	r2, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b05      	cmp	r3, #5
 80025b8:	d136      	bne.n	8002628 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0216 	bic.w	r2, r2, #22
 80025c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d103      	bne.n	80025ea <HAL_DMA_IRQHandler+0x1da>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0208 	bic.w	r2, r2, #8
 80025f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	223f      	movs	r2, #63	; 0x3f
 8002600:	409a      	lsls	r2, r3
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800261a:	2b00      	cmp	r3, #0
 800261c:	d07e      	beq.n	800271c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	4798      	blx	r3
        }
        return;
 8002626:	e079      	b.n	800271c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d01d      	beq.n	8002672 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10d      	bne.n	8002660 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002648:	2b00      	cmp	r3, #0
 800264a:	d031      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
 8002654:	e02c      	b.n	80026b0 <HAL_DMA_IRQHandler+0x2a0>
 8002656:	bf00      	nop
 8002658:	20000000 	.word	0x20000000
 800265c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d023      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	4798      	blx	r3
 8002670:	e01e      	b.n	80026b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10f      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0210 	bic.w	r2, r2, #16
 800268e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d032      	beq.n	800271e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d022      	beq.n	800270a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2205      	movs	r2, #5
 80026c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0201 	bic.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	3301      	adds	r3, #1
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d307      	bcc.n	80026f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f2      	bne.n	80026dc <HAL_DMA_IRQHandler+0x2cc>
 80026f6:	e000      	b.n	80026fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80026f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	4798      	blx	r3
 800271a:	e000      	b.n	800271e <HAL_DMA_IRQHandler+0x30e>
        return;
 800271c:	bf00      	nop
    }
  }
}
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002740:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b40      	cmp	r3, #64	; 0x40
 8002750:	d108      	bne.n	8002764 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002762:	e007      	b.n	8002774 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	60da      	str	r2, [r3, #12]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	3b10      	subs	r3, #16
 8002790:	4a14      	ldr	r2, [pc, #80]	; (80027e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800279a:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <DMA_CalcBaseAndBitshift+0x68>)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4413      	add	r3, r2
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d909      	bls.n	80027c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027b6:	f023 0303 	bic.w	r3, r3, #3
 80027ba:	1d1a      	adds	r2, r3, #4
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	659a      	str	r2, [r3, #88]	; 0x58
 80027c0:	e007      	b.n	80027d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ca:	f023 0303 	bic.w	r3, r3, #3
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	aaaaaaab 	.word	0xaaaaaaab
 80027e8:	08003ba4 	.word	0x08003ba4

080027ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d11f      	bne.n	8002846 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b03      	cmp	r3, #3
 800280a:	d856      	bhi.n	80028ba <DMA_CheckFifoParam+0xce>
 800280c:	a201      	add	r2, pc, #4	; (adr r2, 8002814 <DMA_CheckFifoParam+0x28>)
 800280e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002812:	bf00      	nop
 8002814:	08002825 	.word	0x08002825
 8002818:	08002837 	.word	0x08002837
 800281c:	08002825 	.word	0x08002825
 8002820:	080028bb 	.word	0x080028bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d046      	beq.n	80028be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002834:	e043      	b.n	80028be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800283e:	d140      	bne.n	80028c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002844:	e03d      	b.n	80028c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800284e:	d121      	bne.n	8002894 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b03      	cmp	r3, #3
 8002854:	d837      	bhi.n	80028c6 <DMA_CheckFifoParam+0xda>
 8002856:	a201      	add	r2, pc, #4	; (adr r2, 800285c <DMA_CheckFifoParam+0x70>)
 8002858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285c:	0800286d 	.word	0x0800286d
 8002860:	08002873 	.word	0x08002873
 8002864:	0800286d 	.word	0x0800286d
 8002868:	08002885 	.word	0x08002885
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
      break;
 8002870:	e030      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d025      	beq.n	80028ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002882:	e022      	b.n	80028ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800288c:	d11f      	bne.n	80028ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002892:	e01c      	b.n	80028ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d903      	bls.n	80028a2 <DMA_CheckFifoParam+0xb6>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d003      	beq.n	80028a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028a0:	e018      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
      break;
 80028a6:	e015      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00e      	beq.n	80028d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      break;
 80028b8:	e00b      	b.n	80028d2 <DMA_CheckFifoParam+0xe6>
      break;
 80028ba:	bf00      	nop
 80028bc:	e00a      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
      break;
 80028be:	bf00      	nop
 80028c0:	e008      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
      break;
 80028c2:	bf00      	nop
 80028c4:	e006      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
      break;
 80028c6:	bf00      	nop
 80028c8:	e004      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
      break;
 80028ca:	bf00      	nop
 80028cc:	e002      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80028ce:	bf00      	nop
 80028d0:	e000      	b.n	80028d4 <DMA_CheckFifoParam+0xe8>
      break;
 80028d2:	bf00      	nop
    }
  } 
  
  return status; 
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop

080028e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	; 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	e159      	b.n	8002bb4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002900:	2201      	movs	r2, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	429a      	cmp	r2, r3
 800291a:	f040 8148 	bne.w	8002bae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	2b01      	cmp	r3, #1
 8002928:	d005      	beq.n	8002936 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002932:	2b02      	cmp	r3, #2
 8002934:	d130      	bne.n	8002998 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	2203      	movs	r2, #3
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800296c:	2201      	movs	r2, #1
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 0201 	and.w	r2, r3, #1
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d017      	beq.n	80029d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d123      	bne.n	8002a28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	08da      	lsrs	r2, r3, #3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3208      	adds	r2, #8
 80029e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	220f      	movs	r2, #15
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	691a      	ldr	r2, [r3, #16]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	08da      	lsrs	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3208      	adds	r2, #8
 8002a22:	69b9      	ldr	r1, [r7, #24]
 8002a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2203      	movs	r2, #3
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 0203 	and.w	r2, r3, #3
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80a2 	beq.w	8002bae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	4b57      	ldr	r3, [pc, #348]	; (8002bcc <HAL_GPIO_Init+0x2e8>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	4a56      	ldr	r2, [pc, #344]	; (8002bcc <HAL_GPIO_Init+0x2e8>)
 8002a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a78:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7a:	4b54      	ldr	r3, [pc, #336]	; (8002bcc <HAL_GPIO_Init+0x2e8>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a86:	4a52      	ldr	r2, [pc, #328]	; (8002bd0 <HAL_GPIO_Init+0x2ec>)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	220f      	movs	r2, #15
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a49      	ldr	r2, [pc, #292]	; (8002bd4 <HAL_GPIO_Init+0x2f0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d019      	beq.n	8002ae6 <HAL_GPIO_Init+0x202>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a48      	ldr	r2, [pc, #288]	; (8002bd8 <HAL_GPIO_Init+0x2f4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <HAL_GPIO_Init+0x1fe>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a47      	ldr	r2, [pc, #284]	; (8002bdc <HAL_GPIO_Init+0x2f8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00d      	beq.n	8002ade <HAL_GPIO_Init+0x1fa>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a46      	ldr	r2, [pc, #280]	; (8002be0 <HAL_GPIO_Init+0x2fc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d007      	beq.n	8002ada <HAL_GPIO_Init+0x1f6>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a45      	ldr	r2, [pc, #276]	; (8002be4 <HAL_GPIO_Init+0x300>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d101      	bne.n	8002ad6 <HAL_GPIO_Init+0x1f2>
 8002ad2:	2304      	movs	r3, #4
 8002ad4:	e008      	b.n	8002ae8 <HAL_GPIO_Init+0x204>
 8002ad6:	2307      	movs	r3, #7
 8002ad8:	e006      	b.n	8002ae8 <HAL_GPIO_Init+0x204>
 8002ada:	2303      	movs	r3, #3
 8002adc:	e004      	b.n	8002ae8 <HAL_GPIO_Init+0x204>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e002      	b.n	8002ae8 <HAL_GPIO_Init+0x204>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <HAL_GPIO_Init+0x204>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	f002 0203 	and.w	r2, r2, #3
 8002aee:	0092      	lsls	r2, r2, #2
 8002af0:	4093      	lsls	r3, r2
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002af8:	4935      	ldr	r1, [pc, #212]	; (8002bd0 <HAL_GPIO_Init+0x2ec>)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	3302      	adds	r3, #2
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b06:	4b38      	ldr	r3, [pc, #224]	; (8002be8 <HAL_GPIO_Init+0x304>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b2a:	4a2f      	ldr	r2, [pc, #188]	; (8002be8 <HAL_GPIO_Init+0x304>)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b30:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <HAL_GPIO_Init+0x304>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b54:	4a24      	ldr	r2, [pc, #144]	; (8002be8 <HAL_GPIO_Init+0x304>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b5a:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <HAL_GPIO_Init+0x304>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b7e:	4a1a      	ldr	r2, [pc, #104]	; (8002be8 <HAL_GPIO_Init+0x304>)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b84:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <HAL_GPIO_Init+0x304>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ba8:	4a0f      	ldr	r2, [pc, #60]	; (8002be8 <HAL_GPIO_Init+0x304>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	2b0f      	cmp	r3, #15
 8002bb8:	f67f aea2 	bls.w	8002900 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	bf00      	nop
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40013800 	.word	0x40013800
 8002bd4:	40020000 	.word	0x40020000
 8002bd8:	40020400 	.word	0x40020400
 8002bdc:	40020800 	.word	0x40020800
 8002be0:	40020c00 	.word	0x40020c00
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40013c00 	.word	0x40013c00

08002bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	807b      	strh	r3, [r7, #2]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bfc:	787b      	ldrb	r3, [r7, #1]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c02:	887a      	ldrh	r2, [r7, #2]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c08:	e003      	b.n	8002c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c0a:	887b      	ldrh	r3, [r7, #2]
 8002c0c:	041a      	lsls	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	619a      	str	r2, [r3, #24]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d006      	beq.n	8002c44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c36:	4a05      	ldr	r2, [pc, #20]	; (8002c4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f806 	bl	8002c50 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40013c00 	.word	0x40013c00

08002c50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e267      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d075      	beq.n	8002d72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c86:	4b88      	ldr	r3, [pc, #544]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d00c      	beq.n	8002cac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c92:	4b85      	ldr	r3, [pc, #532]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d112      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c9e:	4b82      	ldr	r3, [pc, #520]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002caa:	d10b      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cac:	4b7e      	ldr	r3, [pc, #504]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d05b      	beq.n	8002d70 <HAL_RCC_OscConfig+0x108>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d157      	bne.n	8002d70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e242      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d106      	bne.n	8002cdc <HAL_RCC_OscConfig+0x74>
 8002cce:	4b76      	ldr	r3, [pc, #472]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a75      	ldr	r2, [pc, #468]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e01d      	b.n	8002d18 <HAL_RCC_OscConfig+0xb0>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x98>
 8002ce6:	4b70      	ldr	r3, [pc, #448]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a6f      	ldr	r2, [pc, #444]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	4b6d      	ldr	r3, [pc, #436]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a6c      	ldr	r2, [pc, #432]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCC_OscConfig+0xb0>
 8002d00:	4b69      	ldr	r3, [pc, #420]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a68      	ldr	r2, [pc, #416]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b66      	ldr	r3, [pc, #408]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a65      	ldr	r2, [pc, #404]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d013      	beq.n	8002d48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7fe fc2c 	bl	800157c <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fe fc28 	bl	800157c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e207      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	4b5b      	ldr	r3, [pc, #364]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0xc0>
 8002d46:	e014      	b.n	8002d72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fe fc18 	bl	800157c <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d50:	f7fe fc14 	bl	800157c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e1f3      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d62:	4b51      	ldr	r3, [pc, #324]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0xe8>
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d063      	beq.n	8002e46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8a:	4b47      	ldr	r3, [pc, #284]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d11c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d96:	4b44      	ldr	r3, [pc, #272]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d116      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da2:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_RCC_OscConfig+0x152>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d001      	beq.n	8002dba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e1c7      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dba:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4937      	ldr	r1, [pc, #220]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dce:	e03a      	b.n	8002e46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d020      	beq.n	8002e1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd8:	4b34      	ldr	r3, [pc, #208]	; (8002eac <HAL_RCC_OscConfig+0x244>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7fe fbcd 	bl	800157c <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de6:	f7fe fbc9 	bl	800157c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e1a8      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df8:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e04:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4925      	ldr	r1, [pc, #148]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]
 8002e18:	e015      	b.n	8002e46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e1a:	4b24      	ldr	r3, [pc, #144]	; (8002eac <HAL_RCC_OscConfig+0x244>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe fbac 	bl	800157c <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e28:	f7fe fba8 	bl	800157c <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e187      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d036      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d016      	beq.n	8002e88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e5a:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <HAL_RCC_OscConfig+0x248>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e60:	f7fe fb8c 	bl	800157c <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e68:	f7fe fb88 	bl	800157c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e167      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x200>
 8002e86:	e01b      	b.n	8002ec0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e88:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <HAL_RCC_OscConfig+0x248>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8e:	f7fe fb75 	bl	800157c <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e94:	e00e      	b.n	8002eb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e96:	f7fe fb71 	bl	800157c <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d907      	bls.n	8002eb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e150      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	42470000 	.word	0x42470000
 8002eb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb4:	4b88      	ldr	r3, [pc, #544]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ea      	bne.n	8002e96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 8097 	beq.w	8002ffc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed2:	4b81      	ldr	r3, [pc, #516]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10f      	bne.n	8002efe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	4b7d      	ldr	r3, [pc, #500]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	4a7c      	ldr	r2, [pc, #496]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eec:	6413      	str	r3, [r2, #64]	; 0x40
 8002eee:	4b7a      	ldr	r3, [pc, #488]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efe:	4b77      	ldr	r3, [pc, #476]	; (80030dc <HAL_RCC_OscConfig+0x474>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d118      	bne.n	8002f3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f0a:	4b74      	ldr	r3, [pc, #464]	; (80030dc <HAL_RCC_OscConfig+0x474>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a73      	ldr	r2, [pc, #460]	; (80030dc <HAL_RCC_OscConfig+0x474>)
 8002f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f16:	f7fe fb31 	bl	800157c <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1e:	f7fe fb2d 	bl	800157c <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e10c      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f30:	4b6a      	ldr	r3, [pc, #424]	; (80030dc <HAL_RCC_OscConfig+0x474>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d106      	bne.n	8002f52 <HAL_RCC_OscConfig+0x2ea>
 8002f44:	4b64      	ldr	r3, [pc, #400]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	4a63      	ldr	r2, [pc, #396]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f50:	e01c      	b.n	8002f8c <HAL_RCC_OscConfig+0x324>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	2b05      	cmp	r3, #5
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x30c>
 8002f5a:	4b5f      	ldr	r3, [pc, #380]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5e:	4a5e      	ldr	r2, [pc, #376]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f60:	f043 0304 	orr.w	r3, r3, #4
 8002f64:	6713      	str	r3, [r2, #112]	; 0x70
 8002f66:	4b5c      	ldr	r3, [pc, #368]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	4a5b      	ldr	r2, [pc, #364]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6713      	str	r3, [r2, #112]	; 0x70
 8002f72:	e00b      	b.n	8002f8c <HAL_RCC_OscConfig+0x324>
 8002f74:	4b58      	ldr	r3, [pc, #352]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	4a57      	ldr	r2, [pc, #348]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f80:	4b55      	ldr	r3, [pc, #340]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	4a54      	ldr	r2, [pc, #336]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002f86:	f023 0304 	bic.w	r3, r3, #4
 8002f8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d015      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f94:	f7fe faf2 	bl	800157c <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9a:	e00a      	b.n	8002fb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f9c:	f7fe faee 	bl	800157c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e0cb      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb2:	4b49      	ldr	r3, [pc, #292]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0ee      	beq.n	8002f9c <HAL_RCC_OscConfig+0x334>
 8002fbe:	e014      	b.n	8002fea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc0:	f7fe fadc 	bl	800157c <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc8:	f7fe fad8 	bl	800157c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e0b5      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fde:	4b3e      	ldr	r3, [pc, #248]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1ee      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d105      	bne.n	8002ffc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff0:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	4a38      	ldr	r2, [pc, #224]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8002ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 80a1 	beq.w	8003148 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003006:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
 800300e:	2b08      	cmp	r3, #8
 8003010:	d05c      	beq.n	80030cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d141      	bne.n	800309e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301a:	4b31      	ldr	r3, [pc, #196]	; (80030e0 <HAL_RCC_OscConfig+0x478>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7fe faac 	bl	800157c <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003028:	f7fe faa8 	bl	800157c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e087      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303a:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	019b      	lsls	r3, r3, #6
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	3b01      	subs	r3, #1
 8003060:	041b      	lsls	r3, r3, #16
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	061b      	lsls	r3, r3, #24
 800306a:	491b      	ldr	r1, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_RCC_OscConfig+0x478>)
 8003072:	2201      	movs	r2, #1
 8003074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003076:	f7fe fa81 	bl	800157c <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307e:	f7fe fa7d 	bl	800157c <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e05c      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003090:	4b11      	ldr	r3, [pc, #68]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x416>
 800309c:	e054      	b.n	8003148 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309e:	4b10      	ldr	r3, [pc, #64]	; (80030e0 <HAL_RCC_OscConfig+0x478>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fe fa6a 	bl	800157c <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ac:	f7fe fa66 	bl	800157c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e045      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_RCC_OscConfig+0x470>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x444>
 80030ca:	e03d      	b.n	8003148 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d107      	bne.n	80030e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e038      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40007000 	.word	0x40007000
 80030e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030e4:	4b1b      	ldr	r3, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x4ec>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d028      	beq.n	8003144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d121      	bne.n	8003144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310a:	429a      	cmp	r2, r3
 800310c:	d11a      	bne.n	8003144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003114:	4013      	ands	r3, r2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800311a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800311c:	4293      	cmp	r3, r2
 800311e:	d111      	bne.n	8003144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	085b      	lsrs	r3, r3, #1
 800312c:	3b01      	subs	r3, #1
 800312e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003130:	429a      	cmp	r2, r3
 8003132:	d107      	bne.n	8003144 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800

08003158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0cc      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800316c:	4b68      	ldr	r3, [pc, #416]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d90c      	bls.n	8003194 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b65      	ldr	r3, [pc, #404]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b63      	ldr	r3, [pc, #396]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0b8      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d020      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ac:	4b59      	ldr	r3, [pc, #356]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a58      	ldr	r2, [pc, #352]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c4:	4b53      	ldr	r3, [pc, #332]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a52      	ldr	r2, [pc, #328]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d0:	4b50      	ldr	r3, [pc, #320]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	494d      	ldr	r1, [pc, #308]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d044      	beq.n	8003278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d119      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e07f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d003      	beq.n	8003216 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003212:	2b03      	cmp	r3, #3
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003216:	4b3f      	ldr	r3, [pc, #252]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e06f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003226:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e067      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003236:	4b37      	ldr	r3, [pc, #220]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f023 0203 	bic.w	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4934      	ldr	r1, [pc, #208]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	4313      	orrs	r3, r2
 8003246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003248:	f7fe f998 	bl	800157c <HAL_GetTick>
 800324c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	e00a      	b.n	8003266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003250:	f7fe f994 	bl	800157c <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	; 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e04f      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	4b2b      	ldr	r3, [pc, #172]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 020c 	and.w	r2, r3, #12
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	429a      	cmp	r2, r3
 8003276:	d1eb      	bne.n	8003250 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d20c      	bcs.n	80032a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003286:	4b22      	ldr	r3, [pc, #136]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_RCC_ClockConfig+0x1b8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e032      	b.n	8003306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4916      	ldr	r1, [pc, #88]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	490e      	ldr	r1, [pc, #56]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032de:	f000 f821 	bl	8003324 <HAL_RCC_GetSysClockFreq>
 80032e2:	4602      	mov	r2, r0
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	490a      	ldr	r1, [pc, #40]	; (8003318 <HAL_RCC_ClockConfig+0x1c0>)
 80032f0:	5ccb      	ldrb	r3, [r1, r3]
 80032f2:	fa22 f303 	lsr.w	r3, r2, r3
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1c8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe f8f8 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023c00 	.word	0x40023c00
 8003314:	40023800 	.word	0x40023800
 8003318:	08003b8c 	.word	0x08003b8c
 800331c:	20000000 	.word	0x20000000
 8003320:	20000004 	.word	0x20000004

08003324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003328:	b094      	sub	sp, #80	; 0x50
 800332a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	647b      	str	r3, [r7, #68]	; 0x44
 8003330:	2300      	movs	r3, #0
 8003332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003334:	2300      	movs	r3, #0
 8003336:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800333c:	4b79      	ldr	r3, [pc, #484]	; (8003524 <HAL_RCC_GetSysClockFreq+0x200>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b08      	cmp	r3, #8
 8003346:	d00d      	beq.n	8003364 <HAL_RCC_GetSysClockFreq+0x40>
 8003348:	2b08      	cmp	r3, #8
 800334a:	f200 80e1 	bhi.w	8003510 <HAL_RCC_GetSysClockFreq+0x1ec>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x34>
 8003352:	2b04      	cmp	r3, #4
 8003354:	d003      	beq.n	800335e <HAL_RCC_GetSysClockFreq+0x3a>
 8003356:	e0db      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003358:	4b73      	ldr	r3, [pc, #460]	; (8003528 <HAL_RCC_GetSysClockFreq+0x204>)
 800335a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800335c:	e0db      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800335e:	4b73      	ldr	r3, [pc, #460]	; (800352c <HAL_RCC_GetSysClockFreq+0x208>)
 8003360:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003362:	e0d8      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003364:	4b6f      	ldr	r3, [pc, #444]	; (8003524 <HAL_RCC_GetSysClockFreq+0x200>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800336c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800336e:	4b6d      	ldr	r3, [pc, #436]	; (8003524 <HAL_RCC_GetSysClockFreq+0x200>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d063      	beq.n	8003442 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800337a:	4b6a      	ldr	r3, [pc, #424]	; (8003524 <HAL_RCC_GetSysClockFreq+0x200>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	099b      	lsrs	r3, r3, #6
 8003380:	2200      	movs	r2, #0
 8003382:	63bb      	str	r3, [r7, #56]	; 0x38
 8003384:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338c:	633b      	str	r3, [r7, #48]	; 0x30
 800338e:	2300      	movs	r3, #0
 8003390:	637b      	str	r3, [r7, #52]	; 0x34
 8003392:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003396:	4622      	mov	r2, r4
 8003398:	462b      	mov	r3, r5
 800339a:	f04f 0000 	mov.w	r0, #0
 800339e:	f04f 0100 	mov.w	r1, #0
 80033a2:	0159      	lsls	r1, r3, #5
 80033a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033a8:	0150      	lsls	r0, r2, #5
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4621      	mov	r1, r4
 80033b0:	1a51      	subs	r1, r2, r1
 80033b2:	6139      	str	r1, [r7, #16]
 80033b4:	4629      	mov	r1, r5
 80033b6:	eb63 0301 	sbc.w	r3, r3, r1
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033c8:	4659      	mov	r1, fp
 80033ca:	018b      	lsls	r3, r1, #6
 80033cc:	4651      	mov	r1, sl
 80033ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033d2:	4651      	mov	r1, sl
 80033d4:	018a      	lsls	r2, r1, #6
 80033d6:	4651      	mov	r1, sl
 80033d8:	ebb2 0801 	subs.w	r8, r2, r1
 80033dc:	4659      	mov	r1, fp
 80033de:	eb63 0901 	sbc.w	r9, r3, r1
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033f6:	4690      	mov	r8, r2
 80033f8:	4699      	mov	r9, r3
 80033fa:	4623      	mov	r3, r4
 80033fc:	eb18 0303 	adds.w	r3, r8, r3
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	462b      	mov	r3, r5
 8003404:	eb49 0303 	adc.w	r3, r9, r3
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003416:	4629      	mov	r1, r5
 8003418:	024b      	lsls	r3, r1, #9
 800341a:	4621      	mov	r1, r4
 800341c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003420:	4621      	mov	r1, r4
 8003422:	024a      	lsls	r2, r1, #9
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800342a:	2200      	movs	r2, #0
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
 800342e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003430:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003434:	f7fd fabe 	bl	80009b4 <__aeabi_uldivmod>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4613      	mov	r3, r2
 800343e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003440:	e058      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003442:	4b38      	ldr	r3, [pc, #224]	; (8003524 <HAL_RCC_GetSysClockFreq+0x200>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	099b      	lsrs	r3, r3, #6
 8003448:	2200      	movs	r2, #0
 800344a:	4618      	mov	r0, r3
 800344c:	4611      	mov	r1, r2
 800344e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003452:	623b      	str	r3, [r7, #32]
 8003454:	2300      	movs	r3, #0
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
 8003458:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800345c:	4642      	mov	r2, r8
 800345e:	464b      	mov	r3, r9
 8003460:	f04f 0000 	mov.w	r0, #0
 8003464:	f04f 0100 	mov.w	r1, #0
 8003468:	0159      	lsls	r1, r3, #5
 800346a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800346e:	0150      	lsls	r0, r2, #5
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4641      	mov	r1, r8
 8003476:	ebb2 0a01 	subs.w	sl, r2, r1
 800347a:	4649      	mov	r1, r9
 800347c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800348c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003490:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003494:	ebb2 040a 	subs.w	r4, r2, sl
 8003498:	eb63 050b 	sbc.w	r5, r3, fp
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	00eb      	lsls	r3, r5, #3
 80034a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034aa:	00e2      	lsls	r2, r4, #3
 80034ac:	4614      	mov	r4, r2
 80034ae:	461d      	mov	r5, r3
 80034b0:	4643      	mov	r3, r8
 80034b2:	18e3      	adds	r3, r4, r3
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	464b      	mov	r3, r9
 80034b8:	eb45 0303 	adc.w	r3, r5, r3
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ca:	4629      	mov	r1, r5
 80034cc:	028b      	lsls	r3, r1, #10
 80034ce:	4621      	mov	r1, r4
 80034d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034d4:	4621      	mov	r1, r4
 80034d6:	028a      	lsls	r2, r1, #10
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034de:	2200      	movs	r2, #0
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	61fa      	str	r2, [r7, #28]
 80034e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034e8:	f7fd fa64 	bl	80009b4 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4613      	mov	r3, r2
 80034f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	3301      	adds	r3, #1
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003504:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003508:	fbb2 f3f3 	udiv	r3, r2, r3
 800350c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800350e:	e002      	b.n	8003516 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_RCC_GetSysClockFreq+0x204>)
 8003512:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003518:	4618      	mov	r0, r3
 800351a:	3750      	adds	r7, #80	; 0x50
 800351c:	46bd      	mov	sp, r7
 800351e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003522:	bf00      	nop
 8003524:	40023800 	.word	0x40023800
 8003528:	00f42400 	.word	0x00f42400
 800352c:	007a1200 	.word	0x007a1200

08003530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003534:	4b03      	ldr	r3, [pc, #12]	; (8003544 <HAL_RCC_GetHCLKFreq+0x14>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000000 	.word	0x20000000

08003548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800354c:	f7ff fff0 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	0a9b      	lsrs	r3, r3, #10
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	4903      	ldr	r1, [pc, #12]	; (800356c <HAL_RCC_GetPCLK1Freq+0x24>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40023800 	.word	0x40023800
 800356c:	08003b9c 	.word	0x08003b9c

08003570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003574:	f7ff ffdc 	bl	8003530 <HAL_RCC_GetHCLKFreq>
 8003578:	4602      	mov	r2, r0
 800357a:	4b05      	ldr	r3, [pc, #20]	; (8003590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	0b5b      	lsrs	r3, r3, #13
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	4903      	ldr	r1, [pc, #12]	; (8003594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003586:	5ccb      	ldrb	r3, [r1, r3]
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800358c:	4618      	mov	r0, r3
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40023800 	.word	0x40023800
 8003594:	08003b9c 	.word	0x08003b9c

08003598 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e03f      	b.n	800362a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fd feac 	bl	800131c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2224      	movs	r2, #36	; 0x24
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f829 	bl	8003634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695a      	ldr	r2, [r3, #20]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003600:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003610:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003638:	b0c0      	sub	sp, #256	; 0x100
 800363a:	af00      	add	r7, sp, #0
 800363c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800364c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003650:	68d9      	ldr	r1, [r3, #12]
 8003652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	ea40 0301 	orr.w	r3, r0, r1
 800365c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800365e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	431a      	orrs	r2, r3
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	431a      	orrs	r2, r3
 8003674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800368c:	f021 010c 	bic.w	r1, r1, #12
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800369a:	430b      	orrs	r3, r1
 800369c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800369e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ae:	6999      	ldr	r1, [r3, #24]
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	ea40 0301 	orr.w	r3, r0, r1
 80036ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4b8f      	ldr	r3, [pc, #572]	; (8003900 <UART_SetConfig+0x2cc>)
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d005      	beq.n	80036d4 <UART_SetConfig+0xa0>
 80036c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4b8d      	ldr	r3, [pc, #564]	; (8003904 <UART_SetConfig+0x2d0>)
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d104      	bne.n	80036de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036d4:	f7ff ff4c 	bl	8003570 <HAL_RCC_GetPCLK2Freq>
 80036d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036dc:	e003      	b.n	80036e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036de:	f7ff ff33 	bl	8003548 <HAL_RCC_GetPCLK1Freq>
 80036e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036f0:	f040 810c 	bne.w	800390c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003702:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003706:	4622      	mov	r2, r4
 8003708:	462b      	mov	r3, r5
 800370a:	1891      	adds	r1, r2, r2
 800370c:	65b9      	str	r1, [r7, #88]	; 0x58
 800370e:	415b      	adcs	r3, r3
 8003710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003712:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003716:	4621      	mov	r1, r4
 8003718:	eb12 0801 	adds.w	r8, r2, r1
 800371c:	4629      	mov	r1, r5
 800371e:	eb43 0901 	adc.w	r9, r3, r1
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800372e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003732:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003736:	4690      	mov	r8, r2
 8003738:	4699      	mov	r9, r3
 800373a:	4623      	mov	r3, r4
 800373c:	eb18 0303 	adds.w	r3, r8, r3
 8003740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003744:	462b      	mov	r3, r5
 8003746:	eb49 0303 	adc.w	r3, r9, r3
 800374a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800375a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800375e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003762:	460b      	mov	r3, r1
 8003764:	18db      	adds	r3, r3, r3
 8003766:	653b      	str	r3, [r7, #80]	; 0x50
 8003768:	4613      	mov	r3, r2
 800376a:	eb42 0303 	adc.w	r3, r2, r3
 800376e:	657b      	str	r3, [r7, #84]	; 0x54
 8003770:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003774:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003778:	f7fd f91c 	bl	80009b4 <__aeabi_uldivmod>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4b61      	ldr	r3, [pc, #388]	; (8003908 <UART_SetConfig+0x2d4>)
 8003782:	fba3 2302 	umull	r2, r3, r3, r2
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	011c      	lsls	r4, r3, #4
 800378a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800378e:	2200      	movs	r2, #0
 8003790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003794:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003798:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800379c:	4642      	mov	r2, r8
 800379e:	464b      	mov	r3, r9
 80037a0:	1891      	adds	r1, r2, r2
 80037a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80037a4:	415b      	adcs	r3, r3
 80037a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037ac:	4641      	mov	r1, r8
 80037ae:	eb12 0a01 	adds.w	sl, r2, r1
 80037b2:	4649      	mov	r1, r9
 80037b4:	eb43 0b01 	adc.w	fp, r3, r1
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037cc:	4692      	mov	sl, r2
 80037ce:	469b      	mov	fp, r3
 80037d0:	4643      	mov	r3, r8
 80037d2:	eb1a 0303 	adds.w	r3, sl, r3
 80037d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037da:	464b      	mov	r3, r9
 80037dc:	eb4b 0303 	adc.w	r3, fp, r3
 80037e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80037f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037f8:	460b      	mov	r3, r1
 80037fa:	18db      	adds	r3, r3, r3
 80037fc:	643b      	str	r3, [r7, #64]	; 0x40
 80037fe:	4613      	mov	r3, r2
 8003800:	eb42 0303 	adc.w	r3, r2, r3
 8003804:	647b      	str	r3, [r7, #68]	; 0x44
 8003806:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800380a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800380e:	f7fd f8d1 	bl	80009b4 <__aeabi_uldivmod>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4611      	mov	r1, r2
 8003818:	4b3b      	ldr	r3, [pc, #236]	; (8003908 <UART_SetConfig+0x2d4>)
 800381a:	fba3 2301 	umull	r2, r3, r3, r1
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	2264      	movs	r2, #100	; 0x64
 8003822:	fb02 f303 	mul.w	r3, r2, r3
 8003826:	1acb      	subs	r3, r1, r3
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800382e:	4b36      	ldr	r3, [pc, #216]	; (8003908 <UART_SetConfig+0x2d4>)
 8003830:	fba3 2302 	umull	r2, r3, r3, r2
 8003834:	095b      	lsrs	r3, r3, #5
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800383c:	441c      	add	r4, r3
 800383e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003842:	2200      	movs	r2, #0
 8003844:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003848:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800384c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003850:	4642      	mov	r2, r8
 8003852:	464b      	mov	r3, r9
 8003854:	1891      	adds	r1, r2, r2
 8003856:	63b9      	str	r1, [r7, #56]	; 0x38
 8003858:	415b      	adcs	r3, r3
 800385a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800385c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003860:	4641      	mov	r1, r8
 8003862:	1851      	adds	r1, r2, r1
 8003864:	6339      	str	r1, [r7, #48]	; 0x30
 8003866:	4649      	mov	r1, r9
 8003868:	414b      	adcs	r3, r1
 800386a:	637b      	str	r3, [r7, #52]	; 0x34
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003878:	4659      	mov	r1, fp
 800387a:	00cb      	lsls	r3, r1, #3
 800387c:	4651      	mov	r1, sl
 800387e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003882:	4651      	mov	r1, sl
 8003884:	00ca      	lsls	r2, r1, #3
 8003886:	4610      	mov	r0, r2
 8003888:	4619      	mov	r1, r3
 800388a:	4603      	mov	r3, r0
 800388c:	4642      	mov	r2, r8
 800388e:	189b      	adds	r3, r3, r2
 8003890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003894:	464b      	mov	r3, r9
 8003896:	460a      	mov	r2, r1
 8003898:	eb42 0303 	adc.w	r3, r2, r3
 800389c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038b4:	460b      	mov	r3, r1
 80038b6:	18db      	adds	r3, r3, r3
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ba:	4613      	mov	r3, r2
 80038bc:	eb42 0303 	adc.w	r3, r2, r3
 80038c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038ca:	f7fd f873 	bl	80009b4 <__aeabi_uldivmod>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4b0d      	ldr	r3, [pc, #52]	; (8003908 <UART_SetConfig+0x2d4>)
 80038d4:	fba3 1302 	umull	r1, r3, r3, r2
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	2164      	movs	r1, #100	; 0x64
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	3332      	adds	r3, #50	; 0x32
 80038e6:	4a08      	ldr	r2, [pc, #32]	; (8003908 <UART_SetConfig+0x2d4>)
 80038e8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	f003 0207 	and.w	r2, r3, #7
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4422      	add	r2, r4
 80038fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038fc:	e105      	b.n	8003b0a <UART_SetConfig+0x4d6>
 80038fe:	bf00      	nop
 8003900:	40011000 	.word	0x40011000
 8003904:	40011400 	.word	0x40011400
 8003908:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800390c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003910:	2200      	movs	r2, #0
 8003912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003916:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800391a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800391e:	4642      	mov	r2, r8
 8003920:	464b      	mov	r3, r9
 8003922:	1891      	adds	r1, r2, r2
 8003924:	6239      	str	r1, [r7, #32]
 8003926:	415b      	adcs	r3, r3
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
 800392a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800392e:	4641      	mov	r1, r8
 8003930:	1854      	adds	r4, r2, r1
 8003932:	4649      	mov	r1, r9
 8003934:	eb43 0501 	adc.w	r5, r3, r1
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	00eb      	lsls	r3, r5, #3
 8003942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003946:	00e2      	lsls	r2, r4, #3
 8003948:	4614      	mov	r4, r2
 800394a:	461d      	mov	r5, r3
 800394c:	4643      	mov	r3, r8
 800394e:	18e3      	adds	r3, r4, r3
 8003950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003954:	464b      	mov	r3, r9
 8003956:	eb45 0303 	adc.w	r3, r5, r3
 800395a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800396a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800397a:	4629      	mov	r1, r5
 800397c:	008b      	lsls	r3, r1, #2
 800397e:	4621      	mov	r1, r4
 8003980:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003984:	4621      	mov	r1, r4
 8003986:	008a      	lsls	r2, r1, #2
 8003988:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800398c:	f7fd f812 	bl	80009b4 <__aeabi_uldivmod>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4b60      	ldr	r3, [pc, #384]	; (8003b18 <UART_SetConfig+0x4e4>)
 8003996:	fba3 2302 	umull	r2, r3, r3, r2
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	011c      	lsls	r4, r3, #4
 800399e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039b0:	4642      	mov	r2, r8
 80039b2:	464b      	mov	r3, r9
 80039b4:	1891      	adds	r1, r2, r2
 80039b6:	61b9      	str	r1, [r7, #24]
 80039b8:	415b      	adcs	r3, r3
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c0:	4641      	mov	r1, r8
 80039c2:	1851      	adds	r1, r2, r1
 80039c4:	6139      	str	r1, [r7, #16]
 80039c6:	4649      	mov	r1, r9
 80039c8:	414b      	adcs	r3, r1
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	f04f 0300 	mov.w	r3, #0
 80039d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039d8:	4659      	mov	r1, fp
 80039da:	00cb      	lsls	r3, r1, #3
 80039dc:	4651      	mov	r1, sl
 80039de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039e2:	4651      	mov	r1, sl
 80039e4:	00ca      	lsls	r2, r1, #3
 80039e6:	4610      	mov	r0, r2
 80039e8:	4619      	mov	r1, r3
 80039ea:	4603      	mov	r3, r0
 80039ec:	4642      	mov	r2, r8
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039f4:	464b      	mov	r3, r9
 80039f6:	460a      	mov	r2, r1
 80039f8:	eb42 0303 	adc.w	r3, r2, r3
 80039fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	f04f 0300 	mov.w	r3, #0
 8003a14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a18:	4649      	mov	r1, r9
 8003a1a:	008b      	lsls	r3, r1, #2
 8003a1c:	4641      	mov	r1, r8
 8003a1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a22:	4641      	mov	r1, r8
 8003a24:	008a      	lsls	r2, r1, #2
 8003a26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a2a:	f7fc ffc3 	bl	80009b4 <__aeabi_uldivmod>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <UART_SetConfig+0x4e4>)
 8003a34:	fba3 1302 	umull	r1, r3, r3, r2
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	2164      	movs	r1, #100	; 0x64
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	3332      	adds	r3, #50	; 0x32
 8003a46:	4a34      	ldr	r2, [pc, #208]	; (8003b18 <UART_SetConfig+0x4e4>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a52:	441c      	add	r4, r3
 8003a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a58:	2200      	movs	r2, #0
 8003a5a:	673b      	str	r3, [r7, #112]	; 0x70
 8003a5c:	677a      	str	r2, [r7, #116]	; 0x74
 8003a5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a62:	4642      	mov	r2, r8
 8003a64:	464b      	mov	r3, r9
 8003a66:	1891      	adds	r1, r2, r2
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	415b      	adcs	r3, r3
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a72:	4641      	mov	r1, r8
 8003a74:	1851      	adds	r1, r2, r1
 8003a76:	6039      	str	r1, [r7, #0]
 8003a78:	4649      	mov	r1, r9
 8003a7a:	414b      	adcs	r3, r1
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a8a:	4659      	mov	r1, fp
 8003a8c:	00cb      	lsls	r3, r1, #3
 8003a8e:	4651      	mov	r1, sl
 8003a90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a94:	4651      	mov	r1, sl
 8003a96:	00ca      	lsls	r2, r1, #3
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	4642      	mov	r2, r8
 8003aa0:	189b      	adds	r3, r3, r2
 8003aa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aa4:	464b      	mov	r3, r9
 8003aa6:	460a      	mov	r2, r1
 8003aa8:	eb42 0303 	adc.w	r3, r2, r3
 8003aac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ab8:	667a      	str	r2, [r7, #100]	; 0x64
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	008b      	lsls	r3, r1, #2
 8003aca:	4641      	mov	r1, r8
 8003acc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ad0:	4641      	mov	r1, r8
 8003ad2:	008a      	lsls	r2, r1, #2
 8003ad4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ad8:	f7fc ff6c 	bl	80009b4 <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <UART_SetConfig+0x4e4>)
 8003ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2164      	movs	r1, #100	; 0x64
 8003aea:	fb01 f303 	mul.w	r3, r1, r3
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	3332      	adds	r3, #50	; 0x32
 8003af4:	4a08      	ldr	r2, [pc, #32]	; (8003b18 <UART_SetConfig+0x4e4>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	f003 020f 	and.w	r2, r3, #15
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4422      	add	r2, r4
 8003b08:	609a      	str	r2, [r3, #8]
}
 8003b0a:	bf00      	nop
 8003b0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b10:	46bd      	mov	sp, r7
 8003b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b16:	bf00      	nop
 8003b18:	51eb851f 	.word	0x51eb851f

08003b1c <__libc_init_array>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	4d0d      	ldr	r5, [pc, #52]	; (8003b54 <__libc_init_array+0x38>)
 8003b20:	4c0d      	ldr	r4, [pc, #52]	; (8003b58 <__libc_init_array+0x3c>)
 8003b22:	1b64      	subs	r4, r4, r5
 8003b24:	10a4      	asrs	r4, r4, #2
 8003b26:	2600      	movs	r6, #0
 8003b28:	42a6      	cmp	r6, r4
 8003b2a:	d109      	bne.n	8003b40 <__libc_init_array+0x24>
 8003b2c:	4d0b      	ldr	r5, [pc, #44]	; (8003b5c <__libc_init_array+0x40>)
 8003b2e:	4c0c      	ldr	r4, [pc, #48]	; (8003b60 <__libc_init_array+0x44>)
 8003b30:	f000 f820 	bl	8003b74 <_init>
 8003b34:	1b64      	subs	r4, r4, r5
 8003b36:	10a4      	asrs	r4, r4, #2
 8003b38:	2600      	movs	r6, #0
 8003b3a:	42a6      	cmp	r6, r4
 8003b3c:	d105      	bne.n	8003b4a <__libc_init_array+0x2e>
 8003b3e:	bd70      	pop	{r4, r5, r6, pc}
 8003b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b44:	4798      	blx	r3
 8003b46:	3601      	adds	r6, #1
 8003b48:	e7ee      	b.n	8003b28 <__libc_init_array+0xc>
 8003b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b4e:	4798      	blx	r3
 8003b50:	3601      	adds	r6, #1
 8003b52:	e7f2      	b.n	8003b3a <__libc_init_array+0x1e>
 8003b54:	08003bb4 	.word	0x08003bb4
 8003b58:	08003bb4 	.word	0x08003bb4
 8003b5c:	08003bb4 	.word	0x08003bb4
 8003b60:	08003bb8 	.word	0x08003bb8

08003b64 <memset>:
 8003b64:	4402      	add	r2, r0
 8003b66:	4603      	mov	r3, r0
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d100      	bne.n	8003b6e <memset+0xa>
 8003b6c:	4770      	bx	lr
 8003b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b72:	e7f9      	b.n	8003b68 <memset+0x4>

08003b74 <_init>:
 8003b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b76:	bf00      	nop
 8003b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7a:	bc08      	pop	{r3}
 8003b7c:	469e      	mov	lr, r3
 8003b7e:	4770      	bx	lr

08003b80 <_fini>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr
